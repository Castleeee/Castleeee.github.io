(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{223:function(t,e,a){t.exports=a.p+"assets/img/Snipaste_2019-12-27_15-06-16.e759e1cd.png"},224:function(t,e,a){t.exports=a.p+"assets/img/Snipaste_2019-12-27_22-03-28.b1dc421e.png"},459:function(t,e,a){"use strict";a.r(e);var n=[function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticClass:"custom-block-title"},[this._v("惭愧"),e("br")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特性","aria-hidden":"true"}},[this._v("#")]),this._v(" 特性")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[t._v("概述:\n"),a("ul",[a("li",[t._v("易学 语法与C语言和C++接近")]),t._v(" "),a("li",[t._v("强制面向对象 Java语言提供类、接口和继承等原语，只支持的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。")]),t._v(" "),a("li",[t._v("分布式 基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URLConnestion、Socket、Serversocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。")]),t._v(" "),a("li",[t._v("健壮 Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。丢弃指针")]),t._v(" "),a("li",[t._v("安全 Java通常被用在网络环境中，因此Java提供了一个安全机制以防恶意代码的攻击如：安全防范机制（类C1aa8基oader），如分配不同的名字空间以防替代本地的同名类、字节代码检查。")]),t._v(" "),a("li",[t._v("体系结构中立 Java程序（.java文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），一次编译到处运行")]),t._v(" "),a("li",[t._v("性能略高 相比解释型的高级脚本语言性能还可以。")]),t._v(" "),a("li",[t._v("原生支持多线程 Thread类或其子类来创建")])])]),t._v(" "),a("li",[t._v("特点\n"),a("ul",[a("li",[t._v("面向对象")]),t._v(" "),a("li",[t._v("健壮完善")]),t._v(" "),a("li",[t._v("jvm跨平台 一次编译到处运行")]),t._v(" "),a("li",[t._v("核心机制:JVM和GC")])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。\n对于不同的平台，有不同的虚拟机。"),a("br"),t._v("\nJava虚拟机机制屏蔽了底层运行平台的差别，实现“一次编译，到处运行”。"),a("br"),t._v("\nC和C++需要程序员手动垃圾回收,可以快速回收,但是忘了就完蛋"),a("br"),t._v("\nJava会开一个系统级线程自动回收"),a("strong",[t._v("不需要也不能")]),t._v("干预,效率慢.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"jre和jdk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jre和jdk","aria-hidden":"true"}},[this._v("#")]),this._v(" JRE和JDK")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。开发工具：编译工具(javac.exe)打包工具(jar.exe)等"),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。\nJDK的开发工具完成java程序，JRE去运行。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件","aria-hidden":"true"}},[this._v("#")]),this._v(" 文件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v(".java")]),this._v("-javac.exe->"),e("code",[this._v(".calss")]),this._v("-java.exe->结果")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[t._v(".java文件,存放源代码")]),t._v(" "),a("li",[t._v(".calss文件\n"),a("ul",[a("li",[t._v("java,scala,groovy等等跨平台需要先编译成class文件,然后让jvm执行")]),t._v(" "),a("li",[t._v("class文件是一种8位字节的二进制流文件， 各个数据项按顺序紧密的从前向后排列， 相邻的项之间没有间隙， 这样可以使得class文件非常紧凑， 体积轻巧， 可以被JVM快速的加载至内存， 并且占据较少的内存空间。 我们的Java源文件， 在被编译之后， 每个类（或者接口）都单独占据一个class文件， 并且类中的所有信息都会在class文件中有相应的描述， 由于class文件很灵活， 它甚至比Java源文件有着更强的描述能力。详细信息看"),a("a",{attrs:{href:"https://blog.csdn.net/zhangjg_blog/article/details/21486985"}},[t._v("这里")])])])]),t._v(" "),a("li",[t._v("JAR文件（Java归档，英语：Java ARchive）\n"),a("ul",[a("li",[t._v("以ZIP格式构建,通常用于聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便分发Java平台应用软件或库")]),t._v(" "),a("li",[t._v("可执行的JAR文件中的Manifest文件用代码Main-Class: myPrograms.MyClass指定了入口点类，注意要指明该类的路径（-cp参数将被忽略）。有些操作系统可以在点击后直接运行可执行JAR文件")])])]),t._v(" "),a("li",[t._v("WAR文件（Web应用程序归档，英语：Web application ARchive[1]）\n"),a("ul",[a("li",[t._v("是一种JAR文件，其中包含用来分发的JSP、Java Servlet、Java类、XML文件、标签库、静态网页（HTML和相关文件），以及构成Web应用程序的其他资源。")]),t._v(" "),a("li",[t._v("可能会以与JAR文件相同的方式进行数字签名，以便他人确定哪些源代码来自哪一个JAR文件")])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("编译后产生的"),a("code",[t._v(".class")]),t._v("文件个数：有多少个类，产生多少个"),a("code",[t._v(".class")]),t._v("文件")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".class")]),t._v("文件命名规则：")]),t._v(" "),a("ul",[a("li",[t._v("2.1普通内部类"),a("br"),t._v("\n外部类名 + $ + 内部类名 [+ $ + 内部类名 + ...]+ .class，类名之间使用符号$隔开"),a("br"),t._v("\n例如："),a("code",[t._v("ClassD$ClassDd$ClassDdd.class")]),t._v("，这里ClassDdd是对底层的普通内部类，它的父类ClassDd，而ClassDd的父类也是最外层的外部类ClassD")]),t._v(" "),a("li",[t._v("2.2匿名内部类"),a("br"),t._v("\n外部类名 + $ + 数字 [+ $ + 数字 + ...]+ .class，类名之间使用符号$隔开，数字根据在外部类中定义的顺序决定,例如："),a("code",[t._v("ClassE$1$1.class")])])])]),t._v(" "),a("li",[a("p",[t._v("同一个"),a("code",[t._v(".java")]),t._v("文件中定义的其他非public声明的类，都遵循以上2点规范")])]),t._v(" "),a("li",[a("p",[t._v("继承、或者接口实现，不影响编译产生的"),a("code",[t._v(".class")]),t._v("文件个数和命名规则")])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//入口")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// write your code here")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"语法总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 语法总结")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注释","aria-hidden":"true"}},[this._v("#")]),this._v(" 注释")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[this._v("//单行")]),this._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[this._v("/*\n * 多行\n */")]),this._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[this._v("/**\n * 文档注释:文档注释允许你在程序中嵌入关于程序的信息。\n * 你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中 \n * 从javadoc 1.4之后，除第一行和最后一行外，可以省略其他行的前导星号(*)，但是一般不这么做\n */")]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("java的"),e("code",[this._v("文档注释")]),this._v("由"),e("code",[this._v("描述性注释")]),this._v("和"),e("code",[this._v("标记部分")]),this._v("组成")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("p",[this._v("文档注释只负责描述类(class)、接口(interface)、方法(method)、构造器(constructor)、成员字段(field)"),e("br"),this._v("\n文档注释必须写在类、接口、方法、构造器、成员字段前面，而写在其他位置，比如函数内部，是无效的文档注释。")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ol",[a("li",[t._v("描述部分的第一行应该是一句对类、接口、方法等的简单描述，这句话最后会被javadoc工具提取并放在索引目录中,跟在"),a("strong",[t._v("第一个句号（英文标点）之后的tab、空行或行终结符规定了第一句的结尾")])]),t._v(" "),a("li",[t._v("在描述段落和标记段落之间空一行，描述段落和标记段落必须分开，不能揉在一起，描述段落必须在标记段落之前")]),t._v(" "),a("li",[t._v("每一行注释都应该跟后面描述的类、方法等保持同样距离的缩进")]),t._v(" "),a("li",[t._v("除了普通的文本之外，描述部分可以使用：\n"),a("ul",[a("li",[t._v("HTML语法标签，例如 "),a("code",[t._v("<b>xxx</b>")])]),t._v(" "),a("li",[t._v("javadoc规定的特殊标签，例如 "),a("code",[t._v("{ @link xxx}")]),t._v(" 。标签的语法规则是："),a("code",[t._v("{@标签名 标签内容}")])]),t._v(" "),a("li",[a("strong",[t._v("javadoc识别一些特殊的描述性注释,详细看"),a("a",{attrs:{href:"https://www.runoob.com/java/ava-documentation.html"}},[t._v("这里")])])])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("注意:")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("blockquote",[a("ol",[a("li",[t._v("标签在有javadoc工具生成文档时会转化成特殊的内容，比如 "),a("code",[t._v("{ @link URL}")]),t._v(" 标签会被转化成指向URL类的超链接")]),t._v(" "),a("li",[t._v("如果注释包含多段内容，段与段之间需要用 "),a("code",[t._v("<p>")]),t._v(" 分隔，空行是没用的")]),t._v(" "),a("li",[t._v("最后结尾行 */ 和起始行不同，这里只有一个星号")]),t._v(" "),a("li",[t._v("为了避免一行过长影响阅读效果，务必将每行的长度限制在80个字符以内")]),t._v(" "),a("li",[t._v("善用javadoc工具的复制机制避免不必要的注释:  如果一个方法覆盖了父类的方法或实现了接口种的方法，那么javadoc工具会在该注释里添加指向原始方法的链接，此外如果新方法没有注释，那么javadoc会把原始方法的注释复制一份作为其注释，但是如果新方法有注释了，就不会复制了。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("风格")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ol",[a("li",[t._v("使用 "),a("code",[t._v("<code>关键字</code>")]),t._v(" 来强调关键字，建议强调的内容有：java关键字、包名、类名、方法名、接口名、字段名、参数名等")]),t._v(" "),a("li",[t._v("控制 "),a("code",[t._v("{@link xxx}")]),t._v(" 的数量，太多的链接会使文档的可读性很差，因为读者总是跳来跳去。不要出现相同的链接，同样的链接只保留第一个；不要为java自带的内容或是常识性的内容提供链接")]),t._v(" "),a("li",[t._v("描述一个方法时，应当只保留方法名字，不要附带方法的参数。比如有个方法是"),a("code",[t._v("add(Object obj)")]),t._v("，那么用"),a("code",[t._v("add")]),t._v("指代该方法即可，而不是"),a("code",[t._v("add(Object obj)")])]),t._v(" "),a("li",[t._v("英文注释可以是短语也可以是句子。如果是"),a("code",[t._v("句子")]),t._v("，首字母要"),a("code",[t._v("大写")]),t._v("，如果是"),a("code",[t._v("短语")]),t._v("，首字母"),a("code",[t._v("小写")]),t._v("。")]),t._v(" "),a("li",[t._v("英文注释使用"),a("code",[t._v("第三人称")]),t._v("，而不是第二人称。比如：")]),t._v(" "),a("li",[t._v("方法的注释应该以动词或动词词组开头，因为方法是一个"),a("code",[t._v("动作")]),t._v("。")]),t._v(" "),a("li",[t._v("当描述类、接口、方法这类的概念时，可以"),a("code",[t._v("不用指名")]),t._v('"类"、"接口"、"方法"这些词语')]),t._v(" "),a("li",[t._v("英文使用"),a("code",[t._v("this")]),t._v("而不是"),a("code",[t._v("the")]),t._v("指代当前类，比如")]),t._v(" "),a("li",[t._v("API名应该是能够简单自我说明的，如果文档注释只是简单重复API的名称还不如没有文档，所以文档注释应该至少提供一些"),a("code",[t._v("额外信息")]),t._v("，否则干脆不要注释")]),t._v(" "),a("li",[t._v("英文注释"),a("code",[t._v("避免拉丁风格的缩写")]),t._v('。比如使用"also knwon as"而不是"aka"， 使用"that is"或"to be specific"而不是"i.e."，使用"for example"而不是"e.g."，使用"in other words"或"namely"而不是"viz."')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("标记部分跟在描述部分之后，且前面必须有一个空行间隔")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ol",[a("li",[a("code",[t._v("@author")]),t._v("  作者，没有特殊格式要求，名字或组织名称都可以")]),t._v(" "),a("li",[a("code",[t._v("@version")]),t._v("  软件版本号（注意不是java版本号），没有特殊格式要求")]),t._v(" "),a("li",[a("code",[t._v("@param")]),t._v("  方法参数，格式为： "),a("code",[t._v("@param")]),t._v(" 参数名称 参数描述\n"),a("ul",[a("li",[t._v("可以在参数描述中说明参数的类型")]),t._v(" "),a("li",[t._v("可以在参数名称和参数描述之间添加额外的空格来对齐")]),t._v(" "),a("li",[t._v("破折号或其他标点符号不能出现在参数描述之外的地方")])])]),t._v(" "),a("li",[a("code",[t._v("@return")]),t._v("  方法返回值，格式为： "),a("code",[t._v("@return")]),t._v(" 返回值描述 ，如果方法没有返回值就不要写"),a("code",[t._v("@return")])]),t._v(" "),a("li",[a("code",[t._v("@deprecated")]),t._v(" 应该告诉用户这个API被哪个新方法替代了，随后用 "),a("code",[t._v("@see")]),t._v(" 标记或 "),a("code",[t._v("{@link}")]),t._v(" 标记指向新")]),t._v(" "),a("li",[a("code",[t._v("@throws")]),t._v(" （或 "),a("code",[t._v("@exception")]),t._v(" ）包含方法显式抛出的检查异常("),a("code",[t._v("Checked Exception")]),t._v(")，至于非显示抛出的其他异常("),a("code",[t._v("Unchecked Exception")]),t._v(")，除非特别有必要，否则就别写了。一个原则就是，只记录可控的问题，对于不可控的或不可预测的问题，不要往上面写。")]),t._v(" "),a("li",[t._v("按照如下顺序提供标记\n"),a("ul",[a("li",[a("code",[t._v("@author")]),t._v("（只出现在类和接口的文档中）")]),t._v(" "),a("li",[a("code",[t._v("@version")]),t._v("（只出现在类和接口的文档中）")]),t._v(" "),a("li",[a("code",[t._v("@param")]),t._v("（只出现在方法或构造器的文档中）")]),t._v(" "),a("li",[a("code",[t._v("@return")]),t._v("（只出现在方法中）")]),t._v(" "),a("li",[a("code",[t._v("@exception")]),t._v("（从java1.2之后也可以使用"),a("code",[t._v("@thrown")]),t._v("替代）")]),t._v(" "),a("li",[a("code",[t._v("@see")])]),t._v(" "),a("li",[a("code",[t._v("@since")])]),t._v(" "),a("li",[a("code",[t._v("@serial")]),t._v("（也可以使用"),a("code",[t._v("@serialField")]),t._v("或"),a("code",[t._v("@serialData")]),t._v("替代）")]),t._v(" "),a("li",[a("code",[t._v("@deprecated")])])])]),t._v(" "),a("li",[t._v("如果有多个相同标记，也要注意顺序\n"),a("ul",[a("li",[t._v("多个"),a("code",[t._v("@author")]),t._v("标记，应该按照"),a("code",[t._v("时间顺序")]),t._v("排列，即"),a("code",[t._v("原作者")]),t._v("应该排在"),a("code",[t._v("第一个")]),t._v("位置")]),t._v(" "),a("li",[t._v("多个"),a("code",[t._v("@param")]),t._v("标记，应该按照"),a("code",[t._v("参数定义的顺序")]),t._v("排列")]),t._v(" "),a("li",[t._v("多个"),a("code",[t._v("@exception")]),t._v("（或是"),a("code",[t._v("@thrown")]),t._v("）应该按照异常的"),a("code",[t._v("字母顺序")]),t._v("排列")]),t._v(" "),a("li",[t._v("多个"),a("code",[t._v("@see")]),t._v("标记，应该按照注释的"),a("code",[t._v("逻辑顺序排列")]),t._v("，即从"),a("code",[t._v("最近的到最远")]),t._v("的，从最"),a("code",[t._v("具体的到最一般")]),t._v("的")])])]),t._v(" "),a("li",[t._v("有参数，"),a("code",[t._v("@param")]),t._v("标记必须包含，且每个对应一个参数,有返回值，"),a("code",[t._v("@return")]),t._v("标记必须包含")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ol",[a("li",[a("strong",[t._v("包级别")]),t._v("的文档注释"),a("br"),t._v("从java1.2起允许包级别的文档注释，用以描述包信息。每个包都可以有自己的包文档注释，这些注释被写在叫"),a("code",[t._v("package.html")]),t._v("的单独文件中，并且放至于与源码("),a("code",[t._v("*.java")]),t._v(")相同的路径下，"),a("strong",[t._v("一定不能单独放置在其他路径。")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[a("code",[t._v("javadoc")]),t._v("工具按照以下流程处理"),a("code",[t._v("package.html")]),t._v(":\n"),a("ul",[a("li",[t._v("把主要内容复制到最终生成的"),a("code",[t._v("package-summary.html")]),t._v("文件中")]),t._v(" "),a("li",[t._v("处理"),a("code",[t._v("@see")]),t._v(", "),a("code",[t._v("@since")]),t._v(", 或"),a("code",[t._v("{@link}")]),t._v("标记")]),t._v(" "),a("li",[t._v("把"),a("code",[t._v("第一句话")]),t._v("复制到javadoc的索引中")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[this._v("匿名、内部类")]),this._v("的文档注释\n"),e("ul",[e("li",[this._v("javadoc不会提取内部类的文档注释，所以如果想要在最终生成的文档中包含内部类的信息，方法就是——写在外部类的文档注释里。。")])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n * Graphics is the abstract base class for all graphics contexts\n * which allow an application to draw onto components realized on\n * various devices or onto off-screen images.\n * A Graphics object encapsulates the state information needed\n * for the various rendering operations that Java supports. This\n * state information includes:\n * <ul>\n * <li>The Component to draw on\n * <li>A translation origin for rendering and clipping coordinates\n * <li>The current clip\n * <li>The current color\n * <li>The current font\n * <li>The current logical pixel operation function (XOR or Paint)\n * <li>The current XOR alternation color\n * (see <a href="#setXORMode">setXORMode</a>)\n * </ul>\n * <p>\n * Coordinates are infinitely thin and lie between the pixels of the\n * output device.\n * Operations which draw the outline of a figure operate by traversing\n * along the infinitely thin path with a pixel-sized pen that hangs\n * down and to the right of the anchor point on the path.\n * Operations which fill a figure operate by filling the interior\n * of the infinitely thin path.\n * Operations which render horizontal text render the ascending\n * portion of the characters entirely above the baseline coordinate.\n * <p>\n * Some important points to consider are that drawing a figure that\n * covers a given rectangle will occupy one extra row of pixels on\n * the right and bottom edges compared to filling a figure that is\n * bounded by that same rectangle.\n * Also, drawing a horizontal line along the same y coordinate as\n * the baseline of a line of text will draw the line entirely below\n * the text except for any descenders.\n * Both of these properties are due to the pen hanging down and to\n * the right from the path that it traverses.\n * <p>\n * All coordinates which appear as arguments to the methods of this\n * Graphics object are considered relative to the translation origin\n * of this Graphics object prior to the invocation of the method.\n * All rendering operations modify only pixels which lie within the\n * area bounded by both the current clip of the graphics context\n * and the extents of the Component used to create the Graphics object.\n * \n * @author Sami Shaio\n * @author Arthur van Hoff\n * @version %I%, %G%\n * @since 1.0\n */')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Graphics")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** \n     * Draws as much of the specified image as is currently available\n     * with its northwest corner at the specified coordinate (x, y).\n     * This method will return immediately in all cases, even if the\n     * entire image has not yet been scaled, dithered and converted\n     * for the current output device.\n     * <p>\n     * If the current output representation is not yet complete then\n     * the method will return false and the indicated \n     * {@link ImageObserver} object will be notified as the\n     * conversion process progresses.\n     *\n     * @param img the image to be drawn\n     * @param x the x-coordinate of the northwest corner\n     * of the destination rectangle in pixels\n     * @param y the y-coordinate of the northwest corner\n     * of the destination rectangle in pixels\n     * @param observer the image observer to be notified as more\n     * of the image is converted. May be \n     * <code>null</code>\n     * @return <code>true</code> if the image is completely \n     * loaded and was painted successfully; \n     * <code>false</code> otherwise.\n     * @see Image\n     * @see ImageObserver\n     * @since 1.0\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("drawImage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Image")]),t._v(" img"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                                      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ImageObserver")]),t._v(" observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Dispose of the system resources used by this graphics context.\n     * The Graphics context cannot be used after being disposed of.\n     * While the finalization process of the garbage collector will\n     * also dispose of the same system resources, due to the number\n     * of Graphics objects that can be created in short time frames\n     * it is preferable to manually free the associated resources\n     * using this method rather than to rely on a finalization\n     * process which may not happen for a long period of time.\n     * <p>\n     * Graphics objects which are provided as arguments to the paint\n     * and update methods of Components are automatically disposed\n     * by the system when those methods return. Programmers should,\n     * for efficiency, call the dispose method when finished using\n     * a Graphics object only if it was created directly from a\n     * Component or another Graphics object.\n     *\n     * @see #create(int, int, int, int)\n     * @see #finalize()\n     * @see Component#getGraphics()\n     * @see Component#paint(Graphics)\n     * @see Component#update(Graphics)\n     * @since 1.0\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Disposes of this graphics context once it is no longer \n     * referenced.\n     *\n     * @see #dispose()\n     * @since 1.0\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("finalize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"关键字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关键字","aria-hidden":"true"}},[this._v("#")]),this._v(" 关键字")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("关键字全都小写,菜鸟上有,保留字尚未使用但是后面可能会用到."),e("br"),this._v("\n标识符区分大小写长度不限制,字母数字下划线,数字不开头无空格,尽量有意义"),e("br"),this._v(" "),e("strong",[this._v("基本")]),this._v("的Java中的名称命名规范：")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[a("code",[t._v("包名")]),t._v(":多单词组成时所有字母都小写：xxxzzz")]),t._v(" "),a("li",[a("code",[t._v("类")]),t._v("名、"),a("code",[t._v("接")]),t._v("口名:多单词组成时，所有单词的"),a("code",[t._v("首字母大写")]),t._v("：xxxYyZzz")]),t._v(" "),a("li",[a("code",[t._v("变量")]),t._v("名、"),a("code",[t._v("方法")]),t._v("名:多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyVZzZ(驼峰)")]),t._v(" "),a("li",[a("code",[t._v("常量")]),t._v("名：所有字母都"),a("code",[t._v("大写")]),t._v("。多单词时每个单词用"),a("code",[t._v("下划线")]),t._v("连接：XXX_YYY_ZZZ")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("p",[e("em",[e("strong",[this._v("int i=0;byte j=i;")])]),e("br"),this._v("\n这种错误只有在javac的时候才能发现,编译期异常")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"内存分配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存分配","aria-hidden":"true"}},[this._v("#")]),this._v(" 内存分配")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("java基本的数据类型详情看"),e("a",{attrs:{href:"https://www.runoob.com/java/java-basic-datatypes.html"}},[this._v("菜鸟")]),this._v("大致有这么些\n")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("img",{staticStyle:{height:"450px"},attrs:{src:a(223)}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("引用类型都可以用"),e("code",[this._v("null")]),this._v("作为值")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[t._v("寄存器：在程序中无法控制,在操作系统层下,自动分配")]),t._v(" "),a("li",[t._v("栈：存放基本类型的数据和对象的引用，但对象本身不存放在栈中，而是存放在堆中（new 出来的对象）")]),t._v(" "),a("li",[t._v("堆：存放用new产生的数据")]),t._v(" "),a("li",[t._v("静态域：存放在对象中用static定义的静态成员")]),t._v(" "),a("li",[t._v("常量池：存放常量")]),t._v(" "),a("li",[t._v("非RAM存储：硬盘等永久存储空间")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("堆")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("栈")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在函数中定义的一些基本类型的变量数据和对象的引用变量都在函数的栈内存中分配。\n　　当在一段代码块定义一个变量时，Java就在栈中 为这个变量分配内存空间，当该变量退出该作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。栈中的数据大小和生命周期是可以确定的，当没有引用指向数据时，这个数据就会消失。"),e("br"),this._v("\nJava的方法运行在栈中\n　　引用变量也存放在栈中,引用变量是普通的变量，定义时在栈中分配，引用变量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，即使程序 运行到使用 new 产生数组或者对象的语句所在的代码块之外，数组和对象本身占据的内存不会被释放，数组和对象在没有引用变量指向它的时候，才变为垃圾，不能在被使用，但仍 然占据内存空间不放，在随后的一个不确定的时间被垃圾回收器收走（释放掉）。这也是 Java 比较占内存的原因。\n　　实际上，栈中的变量指向堆内存中的变量，这就是Java中的指针！")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("堆和栈")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是 确定的，缺乏灵活性。栈中主要存放一些基本类型的变量数据（int, short, long, byte, float, double, boolean, char）和对象句柄(引用)。"),e("br"),this._v("\n栈有一个很重要的特殊性，就是存在栈中的数据可以共享")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("int a = 3;\nint b = 3;\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("常量池")]),e("br"),this._v("\n在堆中")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("用new String() 创建的字符串不是常量，不能在编译期就确定，所以new String() 创建的字符串不放入常量池中，它们有自己的地址空间。"),e("br"),this._v('\nJVM对于字符串常量的"+"号连接，将程序编译期，JVM就将常量字符串的"+"连接优化为连接后的值，拿"a" + 1来说，经编译器优化后在class中就已经是a1。在编译期其字符串常量的值就确定下来.')])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"string创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string创建","aria-hidden":"true"}},[this._v("#")]),this._v(" String创建")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换","aria-hidden":"true"}},[this._v("#")]),this._v(" 类型转换")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("隐式类型转换")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[t._v("混合运算时,小类型会先转成大类型,反向报错"),a("br"),t._v(" "),a("code",[t._v("byte")]),t._v(","),a("code",[t._v("char")]),t._v(","),a("code",[t._v("short")]),t._v("->"),a("code",[t._v("int")]),t._v("->"),a("code",[t._v("long")]),t._v("->"),a("code",[t._v("float")]),t._v("->"),a("code",[t._v("double")])]),t._v(" "),a("li",[a("code",[t._v("byte")]),t._v(","),a("code",[t._v("char")]),t._v(","),a("code",[t._v("short")]),t._v("不会相互转换,计算前会先转换成"),a("code",[t._v("int")])]),t._v(" "),a("li",[t._v("把其他类型和"),a("code",[t._v("String")]),t._v("直接进行+连接时,其他类型会转为"),a("code",[t._v("String")])]),t._v(" "),a("li",[a("code",[t._v("char")]),t._v("和数字类型进行运算时,会先转为ascii")]),t._v(" "),a("li",[t._v('1+2+"a"最后是3a,表达式不是预转义的,而是按照优先级分别运算的')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("强制类型转换")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型 变量= (类型)原变量")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("bool不能转其他")]),this._v(" "),e("li",[this._v("大转小会损失精度")]),this._v(" "),e("li",[this._v("字符串不能直接转换为其他类型,但是基本的包装类可以转换")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 运算符")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[t._v("优先级和C++中一样")]),t._v(" "),a("li",[t._v("取模数为负无所谓,浮点取模还是浮点")]),t._v(" "),a("li",[t._v("全整数除法会舍弃小数部分")]),t._v(" "),a("li",[a("code",[t._v("char")]),t._v("互相加减会转换为"),a("code",[t._v("ascii")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("s=（short）（s+3）;//变量参与运算时候，java程序不知道具体的这个变量在做完运算后会不会查重当前变量的范围，所以会先把变量转换为一个更大长度的变量，这个例子中，short是一个短整形数据，会转化为默认的int\ns+=3;//在使用扩展赋值运算符时，变量在参与运算时会把结果自强制预为当前变量的类型\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("优先级也和C一样"),e("br"),this._v(" "),e("strong",[this._v("位运算符")]),this._v("\nJava定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[t._v("逻辑运算符用于连接布尔型表达式，在java中不可以写成"),a("code",[t._v("3<x<6")]),t._v("，应该写成"),a("code",[t._v("x>3&x<6")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("&")]),t._v("和"),a("code",[t._v("&&")]),t._v("的区别：\n"),a("ul",[a("li",[t._v("单&时，左边无论真假，右边都进行运算；")]),t._v(" "),a("li",[t._v("双&时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。")])])]),t._v(" "),a("li",[a("code",[t._v("|")]),t._v("和"),a("code",[t._v("||")]),t._v("的区别同理，"),a("code",[t._v("|")]),t._v("表示：当左边为真，右边不参与运算,或位运算与。")]),t._v(" "),a("li",[t._v("在不需要逻辑运算两边都参与运算的时候，尽量使用"),a("code",[t._v("&&")]),t._v("和"),a("code",[t._v("||")])]),t._v(" "),a("li",[t._v("异或（^）与或（|）的不同之处是：当左右都为true时，结果为false。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组","aria-hidden":"true"}},[this._v("#")]),this._v(" 数组")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",[t._v("申请一维数组:"),a("br"),t._v(" "),a("code",[t._v("type var[]")]),t._v(" 或 "),a("code",[t._v("type[] var")]),a("br"),t._v("\n动态初始化"),a("code",[t._v("int a[]=new int[4];")]),a("br"),t._v("\n静态初始化"),a("code",[t._v("int a[]=new int[4]{1,2,3,4}")]),a("br"),t._v(" "),a("code",[t._v("a.length")]),t._v("可以获取数组长度")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ul",[a("li",[t._v("指定数组维度\n"),a("ul",[a("li",[t._v("为数组开辟指定大小的数组维度。")]),t._v(" "),a("li",[t._v("如果数组元素是基础数据类型，会将每个元素设为默认值；如果是引用类型，元素值为 null。")])])]),t._v(" "),a("li",[t._v("不指定数组维度\n"),a("ul",[a("li",[t._v("用花括号中的实际元素初始化数组，数组大小与元素数相同。")])])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",[a("code",[t._v("int a[][]=new int[2][3]{ { {1},{2},{3}} 1,{{1},{2},{3} } 2 }")]),t._v("\n只初始化第一维不初始化第二维"),a("code",[t._v("int a[][]=[2][]")]),a("br"),t._v("\n动态初始化"),a("code",[t._v("int a[][]=new int[3][2]")]),a("br"),t._v(" "),a("br"),t._v("\n数组对象（这里可以看成一个指针）存储在栈中。"),a("br"),t._v("\n数组元素存储在堆中。"),a("br"),t._v("\n如下图所示：只有当 JVM 执行 "),a("code",[t._v("new String[]")]),t._v(" 时，才会在堆中开辟相应的内存区域。数组对象 array 可以视为一个指针，指向这块内存的存储地址。"),a("br")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("img",{staticStyle:{height:"350px"},attrs:{src:a(224)}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("blockquote",[e("p",[this._v('Exception in thread "main" java.lang.NullPointerException'),e("br"),this._v("\nat com.company.Main.main(Main.java:50)")])]),this._v(" "),e("p",[this._v("注意这个错误,数组越界和空指针,经常出现")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",[t._v("当指定的数组维度是"),a("strong",[t._v("字符")]),t._v("时，Java 会将其转为"),a("strong",[t._v("整数")]),t._v("。如字符 a 的 ASCII 码是 97。"),a("br"),t._v("\n综上，Java 数组的数组维度可以是"),a("strong",[t._v("常量")]),t._v("、"),a("strong",[t._v("变量")]),t._v("、"),a("strong",[t._v("表达式")]),t._v("，只要转换为"),a("strong",[t._v("整数")]),t._v("即可。"),a("br"),t._v("\n请留意，有些编程语言则不支持这点，如 C/C++ 语言，只允许数组维度是"),a("strong",[t._v("常量")]),a("br"),t._v("\n数组维度并非没有"),a("strong",[t._v("上限")]),t._v("的，如果数值过大，编译时会"),a("strong",[t._v("报错")]),t._v(",数组过大可能会导致"),a("strong",[t._v("栈溢出")]),a("br"),t._v("\nJava中数组类型是一种"),a("strong",[t._v("引用类型")]),t._v("。它可以作为引用，被 Java 函数作为函数入参或返回值")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"引用参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 引用参考")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[t._v("https://www.cnblogs.com/itmanxgl/p/605b4b093bd8abf5b60ef65749a0857d.html")]),t._v(" "),a("li",[t._v("https://zh.wikipedia.org/wiki/JAR_(%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F)")]),t._v(" "),a("li",[t._v("https://blog.csdn.net/zhangjg_blog/article/details/21486985")]),t._v(" "),a("li",[t._v("https://www.cnblogs.com/boring09/p/4274893.html")]),t._v(" "),a("li",[t._v("https://www.cnblogs.com/jing99/p/6092153.html")]),t._v(" "),a("li",[t._v("https://juejin.im/post/5c88e75fe51d4520a700b9f3")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",[t._v("java的src下多个package,每个package能互相通信吗,怎么引入?"),a("br"),t._v("\njvm的内存分配是怎么分配的,直接有一个系统线程常驻读写内存吗?"),a("br"),t._v("\n编译产生的各级目录是什么意思?"),a("br"),t._v('\nString str="xxx" 这个String包是哪里的,还有什么包'),a("br"),t._v('\n1+2+"a"最后是3a,加号是怎么编译的,不会先预转义吗'),a("br"),t._v("\n基本数据类型包放哪里?"),a("br"),t._v("\nstring args[]是干嘛的,还能在这里干嘛,怎么解析的main函数"),a("br"),t._v("\n不同长度数组被放到同一个一维数组中怎么开辟的空间呢"),a("br"),t._v("\n我删掉的Main.class是个什么?源码是完整的,目录是空的为什么无法构建就不能运行了"),a("br"),t._v("\n数组作为参数的出入过程")])}],s=a(0),v=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("div",{staticClass:"tip custom-block"},[t._m(0),t._v(" "),a("p",[t._v("身为CS专业学生JAVA却没怎么学 "),a("B",{staticStyle:{"font-size":"45px"}},[t._v("☕️")]),a("br"),t._v("\n语法网上到处都是，我就整理一下自己不大会的"),a("br")],1)]),t._v(" "),a("p",[t._v("其实对J2EE没什么要求，学完语法深入jvm，搞hadoop去，要写也用kotlin。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("配置环境前面有不说了")]),t._v(" "),t._m(4),t._v(" "),a("p",[t._v("JDK(Java Development Kit Java开发工具包)")]),t._v(" "),t._m(5),t._v(" "),a("p",[t._v("JRE(Java Runtime Environment Java运行环境)")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),a("p",[t._v("相关的后缀名:")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),a("p",[t._v("大小写敏感\n源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）\n类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass\n程序入口固定")]),t._v(" "),t._m(11),t._m(12),t._v(" "),a("p",[t._v("仅涉及到SE,网上有的不po过来了,不大会得不熟的放过来")]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),a("h3",[t._v("描述性注释(Description)")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),a("h3",[t._v("标记部分(Tag)")]),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),a("h3",[t._v("其他部分(Other)")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),a("p",[t._v("在包注释主要介绍一下这个包大致是做什么用的、背景信息、在使用方面需要注意的地方等等信息")]),t._v(" "),t._m(26),t._v(" "),a("details",[a("summary",[a("B",[a("I",{staticStyle:{cursor:"pointer",color:"#0e5870"}},[t._v("复杂注释的示例")])],1)],1),t._v(" "),t._m(27)]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._m(34),a("p"),t._v(" "),t._m(35),t._v(" "),a("h3",[t._v("内存分配")]),t._v(" "),a("p",[t._v("一般Java在内存分配时会涉及到以下区域：")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),a("p",[t._v("堆内存用来存放由new创建的对象和数组。 在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理")]),t._v(" "),a("p",[t._v("在堆中产生了一个数组或对象后，还可以 在栈中定义一个特殊的变量，让栈中这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量。  引用变量就相当于是 为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。引用变量就相当于是为数组或者对象起的一个名称。")]),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),a("p",[t._v("堆是一个运行时数据区,类的(对象从中分配空间。这些对象通过new、newarray、 anewarray和multianewarray等指令建立，它们不需要程序代码来显式的释放。堆是由垃圾回收来负责的，堆的优势是可以动态地分配内存 大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态 分配内存，存取速度较慢。")]),t._v(" "),t._m(41),t._v(" "),t._m(42),a("p",[t._v("编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找栈中是否有3这个值，如果没找到，就将3存放进来，然后将a指向3。接着处理int b = 3；在创建完b的引用变量后，因为在栈中已经有3这个值，便将b直接指向3。这样，就出现了a与b同时均指向3的情况。")]),t._v(" "),a("p",[t._v("这时，如果再令 a=4；那么编译器会重新搜索栈中是否有4值，如果没有，则将4存放进来，并令a指向4；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响 到b的值。")]),t._v(" "),a("p",[t._v("要注意这种数据的共享与两个对象的引用同时指向一个对象的这种共享是不同的，因为这种情况a的修改并不会影响到b, 它是由编译器完成的，它有利于节省空间。而一个对象引用变量修改了这个对象的内部状态，会影响到另一个对象引用变量。")]),t._v(" "),a("p",[t._v("对于成员变量和局部变量：成员变量就是方法外部，类的内部定义的变量；局部变量就是方法或语句块内部定义的变量。局部变量必须初始化。\n形式参数是局部变量，局部变量的数据存在于栈内存中。栈内存中的局部变量随着方法的消失而消失。\n成员变量存储在堆中的对象里面，由垃圾回收器负责回收。")]),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),a("p",[t._v('final只对引用的"值"(即内存地址)有效，它迫使引用只能指向初始指向的那个对象，改变它的指向会导致编译期错误。至于它所指向的对象 的变化，final是不负责的。')]),t._v(" "),t._m(45),t._v(" "),a("p",[t._v("字面量省内存")]),t._v(" "),a("p",[t._v("留坑:整理")]),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),a("br"),t._v(" "),a("p",[t._v("申请多维数组:")]),t._v(" "),t._m(60),t._m(61),a("p"),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),a("Valine"),t._v(" "),t._m(66)],1)},n,!1,null,null,null);e.default=v.exports}}]);