(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{344:function(t,e,i){t.exports=i.p+"assets/img/Snipaste_2019-12-26_20-17-25.91e28535.png"},345:function(t,e,i){t.exports=i.p+"assets/img/Snipaste_2019-12-26_19-42-44.1857227e.png"},346:function(t,e,i){t.exports=i.p+"assets/img/Snipaste_2019-12-26_19-43-26.0cb7105c.png"},347:function(t,e,i){t.exports=i.p+"assets/img/Snipaste_2019-12-26_21-41-22.6032f76b.png"},348:function(t,e,i){t.exports=i.p+"assets/img/Snipaste_2019-12-26_21-56-55.2cb2894e.png"},349:function(t,e,i){t.exports=i.p+"assets/img/Snipaste_2019-12-26_22-31-29.24fe72a0.png"},403:function(t,e,i){"use strict";i.r(e);var s=[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("h1",[this._v("Docker🐳")]),this._v(" "),e("br"),this._v(" "),e("p",[this._v("docker架构网上一大把，文档里也有主要介绍常用命令和使用中遇到的问题"),e("br"),this._v("\n被linux各种奇奇怪怪的错误折磨疯了"),e("br"),this._v(" 用了docker一时爽，一直用docker一直爽！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"🐳"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#🐳","aria-hidden":"true"}},[this._v("#")]),this._v(" 🐳")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"安装与启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装与启动","aria-hidden":"true"}},[this._v("#")]),this._v(" 安装与启动")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("p",[t._v("windows下安装需要在BIOS中启动虚拟化和Hyper-v。无脑下一步就行"),i("br"),t._v("\nlinux "),i("a",{attrs:{href:"https://www.cnblogs.com/yufeng218/p/8370670.html"}},[t._v("这是centos")]),t._v(" "),i("br"),t._v("\n启动服务:sudo service docker start"),i("br"),t._v("\n先试一下:docker run ubuntu echo hello docker"),i("br"),t._v("\nhello docker"),i("br"),t._v(" "),i("a",{attrs:{href:"https://hub.daocloud.io/"}},[t._v("国内的镜像")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"基本命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本命令","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本命令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("p",[this._v("可以把每个 container 看做是一个独立的主机,container 一旦创建如果没有用 rm 命令移除，将会一直存在。所以用完后记得删除")])])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[i("p",[t._v("docker info 查看本机上docker的信息")])]),t._v(" "),i("li",[i("p",[t._v("docker version 查看docker的版本")])]),t._v(" "),i("li",[i("p",[t._v("docker login/logout登陆/登出")])]),t._v(" "),i("li",[i("p",[t._v("docker images 查看镜像可以跟name")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("-a 列出所有镜像（含过程镜像）；")])]),t._v(" "),i("li",[i("p",[t._v("-f 过滤镜像，如： -f ['dangling=true'] 只列出满足dangling=true 条件的镜像；")])]),t._v(" "),i("li",[i("p",[t._v("--no-trunc 可显示完整的镜像ID；")])]),t._v(" "),i("li",[i("p",[t._v("-q 仅列出镜像ID。")])]),t._v(" "),i("li",[i("p",[t._v("--tree 以树状结构列出镜像的所有提交历史。")])])])]),t._v(" "),i("li",[i("p",[t._v("docker run -p 8080:80 -d xxx  容器运行指定的image,将镜像的80映射到本机的8080，-d意思是直接返回不阻塞")]),t._v(" "),i("ul",[i("li",[t._v("-i - t 进入命令行")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("映射端口docker run -d -p 80:80 -p 22:22"),e("br"),this._v("\n进入命令行docker run -i - t xxxx (注意有个空格)/bin/bash")])])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[i("p",[t._v("docker ps 查看当前正在运行的容器的信息"),i("br"),t._v("\n列出所有运行中容器。")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("-a 列出所有容器（含沉睡镜像）；")])]),t._v(" "),i("li",[i("p",[t._v('--before="nginx" 列出在某一容器之前创建的容器，接受容器名称和ID作为参数；')])]),t._v(" "),i("li",[i("p",[t._v('--since="nginx" 列出在某一容器之后创建的容器，接受容器名称和ID作为参数；')])]),t._v(" "),i("li",[i("p",[t._v("-f [exited=int] 列出满足exited=int条件的容器；")])]),t._v(" "),i("li",[i("p",[t._v("-l 最新创建的一个容器；")])]),t._v(" "),i("li",[i("p",[t._v("--no-trunc 显示完整的容器ID；")])]),t._v(" "),i("li",[i("p",[t._v("-n=4 列出最近创建的4个容器；")])]),t._v(" "),i("li",[i("p",[t._v("-q 仅列出容器ID；")])]),t._v(" "),i("li",[i("p",[t._v("-s 显示容器大小。"),i("br")]),t._v(" "),i("pre",[i("code",[t._v(' [root@izuf6720onwdpnl2xfy65lz ~]# docker ps\n CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n 28ee7cbe79da        docker.io/nginx     "nginx -g \'daemon ..."   53 seconds ago      Up 52 seconds       0.0.0.0:8081->80/tcp   goofy_ritchie\n')])])])])]),t._v(" "),i("li",[i("p",[t._v("docker cp file.txt 28ee7cbe79da(容器id)：//usr/share/nginx/html 将file.txt复制到该容器的指定目录")])]),t._v(" "),i("li",[i("p",[t._v("ctrl+Q+P退出容器")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("p",[this._v("你所做的对容器内部的更改docker不会保存，需要用命令commit")])])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[t._v('docker commit -m "commit信息" imageid 保存的image的名字')]),t._v(" "),i("li",[t._v("docker rmi imageid 删掉image")]),t._v(" "),i("li",[t._v("docker rm imageid 删掉image可以删除历史\n"),i("ul",[i("li",[i("p",[t._v("-f 强行移除该容器，即使其正在运行")])]),t._v(" "),i("li",[i("p",[t._v("-l 让该镜像断网")])]),t._v(" "),i("li",[i("p",[t._v("-v 移除与容器关联的空间")])])])]),t._v(" "),i("li",[t._v("docker /stop imageid 启动/停止/重启 一个image\n"),i("ul",[i("li",[i("p",[t._v("-i 启动一个容器并进入交互模式操控该镜像的命令行")])]),t._v(" "),i("li",[i("p",[t._v("-t 10 停止或者重启容器的超时时间（秒），超时后系统将杀死进程。")])])])]),t._v(" "),i("li",[t._v("docker inspect")]),t._v(" "),i("li",[t._v("docker history imageid 查看历史\n"),i("ul",[i("li",[i("p",[t._v("--no-trunc 显示完整的提交记录；")])]),t._v(" "),i("li",[i("p",[t._v("-q 仅列出提交记录ID。")])])])]),t._v(" "),i("li",[t._v("docker pull xxx 获取image")]),t._v(" "),i("li",[t._v("docker build + path 把这个路径下所有的文件打包成一个dockerimage\n"),i("ul",[i("li",[t._v("-t xxx 附加这个image的标签")])])]),t._v(" "),i("li",[t._v("docker push 推送dockerimage")]),t._v(" "),i("li",[t._v("docker exec -it 容器id或name /bin/bash 进入容器的命令行用attach的时候推出会直接结束容器")])])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),i("p",[t._v("docker rm "),i("code",[t._v("docker ps -a -q")]),t._v("删除所有的容器"),i("br"),t._v("\ndocker rmi "),i("code",[t._v("docker images -q")]),t._v("删除所有镜像"),i("br"),t._v("\ndocker rmi "),i("code",[t._v("docker images -q | awk '/^<none>/ { print $3 }'")]),t._v("按条件删除镜像"),i("br"),t._v("\ndocker rmi --force "),i("code",[t._v("docker images | grep doss-api | awk '{print $3}'")]),t._v("按条件删除镜像其中doss-api为关键字"),i("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"dcokerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dcokerfile","aria-hidden":"true"}},[this._v("#")]),this._v(" dcokerfile")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),i("th",{staticStyle:{"text-align":"right"}},[t._v("用途")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("FROM")]),t._v(" "),i("td",{staticStyle:{"text-align":"right"}},[t._v("base image")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("RUN")]),t._v(" "),i("td",{staticStyle:{"text-align":"right"}},[t._v("执行命令")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("ADD")]),t._v(" "),i("td",{staticStyle:{"text-align":"right"}},[t._v("添加文件")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("COPY")]),t._v(" "),i("td",{staticStyle:{"text-align":"right"}},[t._v("拷贝文件")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("ADD")]),t._v(" "),i("td",{staticStyle:{"text-align":"right"}},[t._v("可以添加远程文件和本机文件")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("CMD")]),t._v(" "),i("td",{staticStyle:{"text-align":"right"}},[t._v("执行命令")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("EXPOSE")]),t._v(" "),i("td",{staticStyle:{"text-align":"right"}},[t._v("暴露端口")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"分层存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分层存储","aria-hidden":"true"}},[this._v("#")]),this._v(" 分层存储")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"volume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volume","aria-hidden":"true"}},[this._v("#")]),this._v(" volume")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("docker run -d --name -v 容器内部的一个路径 nginx(imageName)挂载了一个路径。"),e("br"),this._v("\ndocker inspect nginx(name)进行访问")]),this._v(" "),e("pre",[e("code",[this._v('      "Mounts": [\n                  {\n                      "Type": "volume",\n                      "Name": "f9bdb344eba8cf6667950ded15d5561e2624225703d0472d0432cfa4a3dcf742",\n                      "Source": "/www/server/docker/volumes/f9bdb344eba8cf6667950ded15d5561e2624225703d0472d0432cfa4a3dcf742/_data",\n                      "Destination": "/usr/share/nginx/html",\n                      "Driver": "local",\n                      "Mode": "",\n                      "RW": true,\n                      "Propagation": ""\n                  }\n')])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("注意source容器外和destination容器内"),e("br")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[t._v("docker exec -i -t nginx(镜像名) /bin/bash(linux的bash路径)进入镜像内部")]),t._v(" "),i("li",[t._v("docker run -p 8080:80 -d -v $PWD/a:/usr/share/nginx/html nginx\n"),i("ul",[i("li",[t._v("将内部的80映射到8080，将内部的/usr/share/nginx/html目录挂载到$PWD(当前工作目录)的a目录下")])])]),t._v(" "),i("li",[t._v("1.docker create -v $PWD/data:/var/mydata --name data_container ubuntu\n"),i("ul",[i("li",[t._v("以ubuntu为基础，创建一个容器。-v让这个容器的目录/var/mydata挂载到$PWD/data")])])]),t._v(" "),i("li",[t._v("2.docker run -it --volumes-from data_container ubuntu /bin/bash 运行ubuntu镜像和这个镜像互通(这个ubuntu的这个目录修改会同步到data_container和挂载的目录)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"镜像仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像仓库","aria-hidden":"true"}},[this._v("#")]),this._v(" 镜像仓库")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("docker daemon 管着container 和images，images是从Registry拉取的，默认是官方的dockerHub"),e("br"),this._v("\n国内 aliyun 时速云 daocloud"),e("br")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("docker search xxx搜索")]),this._v(" "),e("li",[this._v("docker pull xxx拉取")]),this._v(" "),e("li",[this._v("docker push xxx 推送到Registry")]),this._v(" "),e("li",[this._v("docker tag aaa bbb改掉aaa的tags产生一个bbb")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("docker容器的主线程（dockfile中CMD执行的命令）结束，容器会退出")])])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("p",[t._v("可以使用交互式启动"),i("br"),t._v(" "),i("code",[t._v("docker run -i [CONTAINER_NAME or CONTAINER_ID]")]),i("br"),t._v("\n使用后台模式和tty选项"),i("br"),t._v(" "),i("code",[t._v("docker run -dit [CONTAINER_NAME or CONTAINER_ID]")]),i("br"),t._v("\ndocker调出后台容器"),i("br"),t._v(" "),i("code",[t._v("docker attach [CONTAINER_NAME or CONTAINER_ID]")]),i("br"),t._v("\n退出时，使用[ctrl + D]和exit，这样会结束docker当前线程，容器结束，可以使用[ctrl + P][ctrl + Q]退出而不终止容器运行"),i("br"),t._v("\n如下命令，会在指定容器中执行指定命令，[ctrl+D]退出后不会终止容器运行"),i("br"),t._v(" "),i("code",[t._v("docker exec -it [CONTAINER_NAME or CONTAINER_ID] /bin/bash")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持久化","aria-hidden":"true"}},[this._v("#")]),this._v(" 持久化")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"⚓"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#⚓","aria-hidden":"true"}},[this._v("#")]),this._v(" ⚓")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("h1",[this._v("K8s⚓Kubernetes")]),this._v(" "),e("br"),this._v(" "),e("p",[this._v("利用k8s编排并且管理集群和分布式环境"),e("br"),this._v("\n说白了就是用来数框框的😶")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"windows安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows安装","aria-hidden":"true"}},[this._v("#")]),this._v(" windows安装")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"安装k8s"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装k8s","aria-hidden":"true"}},[this._v("#")]),this._v(" 安装k8s")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[i("p",[t._v("docker:19.03.4")])]),t._v(" "),i("li",[i("p",[t._v("k8s:1.14.7(和docker对应就行)")])]),t._v(" "),i("li",[i("p",[t._v("windows:1803+")])]),t._v(" "),i("li",[i("p",[t._v("WSL:Ubuntu18.14")]),t._v(" "),i("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("img",{staticStyle:{height:"450px"},attrs:{src:i(344)}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("具体方法看"),e("a",{attrs:{href:"https://github.com/AliyunContainerService/k8s-for-docker-desktop"}},[this._v("这里")]),e("br"),this._v("\n下载对应版本的脚本,用powershell-admin进入,运行"),e("code",[this._v(".\\load_images.ps1")]),this._v("\n下载约2G好了之后退出docker客户端然后重新启动,Enable Kubernetes,他想下载就允许,过5分钟左右应该就好了"),e("br"),this._v("\n之后在windows中可以正常查看,但是WSL中还没配置")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("img",{staticStyle:{height:"350px"},attrs:{src:i(345)}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("下载这个东西网址在这"),e("a",{attrs:{href:"https://storage.googleapis.com/kubernetes-release/release/v1.14.7/bin/linux/amd64/kubectl"}},[this._v("https://storage.googleapis.com/kubernetes-release/release/v1.14.7/bin/linux/amd64/kubectl")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("chmod +x kubectl")])]),this._v(" "),e("li",[e("code",[this._v("sudo mv ./kubectl /usr/local/bin/kubectl")])]),this._v(" "),e("li",[this._v("之后要让 WSL 里的 kubectl 命令知道如何连接 Docker Desktop for Windows 启动的 Kubernetes 集群把 Docker Desktop for Windows 创建的集群的配置文件拷贝到 WSL 里的用户目录下：")]),this._v(" "),e("li",[e("code",[this._v("mkdir ~/.kube && cp /c/Users/[USERNAME]/.kube/config ~/.kube")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("img",{staticStyle:{height:"250px"},attrs:{src:i(346)}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("大功告成输入"),e("code",[this._v("kubectl cluster-info")]),this._v(","),e("code",[this._v("kubectl get nodes")]),this._v("查看状态\n"),e("br")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("img",{staticStyle:{height:"120px"},attrs:{src:i(347)}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"配置-kubernetes-控制台"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-kubernetes-控制台","aria-hidden":"true"}},[this._v("#")]),this._v(" 配置 Kubernetes 控制台")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("首先把下载的那个文件夹,里面有个sample文件夹和"),e("strong",[this._v("kubernetes-dashboard.yaml")]),this._v(",移动到WSL里面去,为了整洁放到"),e("code",[this._v(".kube")]),this._v("下"),e("br"),this._v(" "),e("br")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ul",[i("li",[i("code",[t._v("cp /e/ooowl/Download/k8s-for-docker-desktop-1.14.7/sample .")])]),t._v(" "),i("li",[i("code",[t._v("kubectl create -f kubernetes-dashboard.yaml")])]),t._v(" "),i("li",[t._v("开启代理"),i("code",[t._v("kubectl proxy")]),t._v(",不过一旦结束ssh会话就会停止")]),t._v(" "),i("li",[t._v("可以放后台"),i("code",[t._v("nohup kubectl proxy > .kube/log/kubeDashboard.log 2>&1 &")]),t._v(",日志放在"),i("code",[t._v(".kube/log/kubeDashboard.log")]),t._v(",不用的时候kill -9 PID")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("img",{staticStyle:{height:"350px"},attrs:{src:i(348)}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("p",[this._v("kubectl的版本一定要和K8s版本对应,都则会报错"),e("br"),this._v(" "),e("code",[this._v("error: SchemaError(io.k8s.api.authentication.v1.TokenReviewStatus): invalid object doesn't have additional properties")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("访问"),e("strong",[this._v("url")]),this._v(" "),e("a",{attrs:{href:"http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=default"}},[this._v("http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=default")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"创建token"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建token","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建token")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('TOKEN=$(kubectl -n kube-system describe secret default| awk \'$1=="token:"{print $2}\')\n\nkubectl config set-credentials docker-for-desktop --token="${TOKEN}"\n\necho $TOKEN\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("可能每次打开都需要")]),this._v(" "),e("br")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{align:"center"}},[e("img",{staticStyle:{height:"400px"},attrs:{src:i(349)}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"安装rancher"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装rancher","aria-hidden":"true"}},[this._v("#")]),this._v(" 安装Rancher")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("其实大家时间都不多,不可能把锁i有技术都学习一遍,学k8s也是拓展技术广度,所以简单易用快速达到目的是最好的."),e("br"),this._v("\nk8s用dashboard管理不大全,我发现了这个宝贝,虽然现在还处于比较早期,有些坑,我先在这里写,后面再补充.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("p",[this._v("本教程从k8s开始就本着不求甚解的态度,为的就是追求效果最大化")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"引用参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 引用参考")])}],r=i(0),a=Object(r.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),i("p",[t._v("运行docker image时候，不同的容器可能只读共享一个image，当运行起来之后上面每个容器的状态不保存，commit会产生改过的新容器")]),t._v(" "),t._m(15),t._v(" "),i("p",[t._v("独立与容器外提供持久化存储，容器之间共享")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),i("p",[t._v("说明:我是在windows下安装docker-desktop,然后通过docker-desktop安装自带的Kubernets,然后在WSL中安装kubectl")]),t._v(" "),t._m(28),t._v(" "),i("p",[t._v("在Windows下先安装好docker,记得暴露端口.")]),t._v(" "),t._m(29),t._v(" "),i("p",[t._v("国内基本都被屏蔽了,如果你直接Enable Kubernetes会一直下载不完成卡住不动,所以要下载两个G的镜像很不容易,阿里有个仓库可以用.")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),i("p",[t._v("可以直接curl,大约50M下载完之后cp到自己WSL的~目录下")]),t._v(" "),t._m(34),t._v(" "),i("br"),t._v(" "),t._m(35),i("br"),t._v(" "),t._m(36),t._m(37),i("br"),i("p"),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),i("br"),t._v(" "),t._m(41),i("br"),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._m(46),t._m(47),i("br"),i("p"),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),i("p",[t._v("好像是高级知识....先学学前置知识")]),t._v(" "),t._m(51),t._v(" "),i("ul",[i("li",[t._v("https://magicsong.github.io/2018/04/20/WSL-vscode%E5%8F%8C%E5%89%91%E5%90%88%E7%92%A7/")]),t._v(" "),i("li",[t._v("https://zhuanlan.zhihu.com/p/85531874")]),t._v(" "),i("li",[t._v("https://github.com/AliyunContainerService/k8s-for-docker-desktop")]),t._v(" "),i("li",[t._v("https://stackoverflow.com/questions/55528603/kubectl-create-invalid-object/55530485")]),t._v(" "),i("li",[t._v("https://kubesphere.com.cn/docs/v2.1/zh-CN/release/release-v210/")]),t._v(" "),i("li",[t._v("https://juejin.im/post/5d89a2e3518825090d61c39e\n"),i("Valine")],1)])])},s,!1,null,null,null);e.default=a.exports}}]);